// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace Proto {
class AccountCheck;
class AccountCheckDefaultTypeInternal;
extern AccountCheckDefaultTypeInternal _AccountCheck_default_instance_;
class AccountCheckRs;
class AccountCheckRsDefaultTypeInternal;
extern AccountCheckRsDefaultTypeInternal _AccountCheckRs_default_instance_;
class AppInfoListSync;
class AppInfoListSyncDefaultTypeInternal;
extern AppInfoListSyncDefaultTypeInternal _AppInfoListSync_default_instance_;
class AppInfoSync;
class AppInfoSyncDefaultTypeInternal;
extern AppInfoSyncDefaultTypeInternal _AppInfoSync_default_instance_;
class AppRegister;
class AppRegisterDefaultTypeInternal;
extern AppRegisterDefaultTypeInternal _AppRegister_default_instance_;
class CmdApp;
class CmdAppDefaultTypeInternal;
extern CmdAppDefaultTypeInternal _CmdApp_default_instance_;
class CmdThread;
class CmdThreadDefaultTypeInternal;
extern CmdThreadDefaultTypeInternal _CmdThread_default_instance_;
class CreateComponent;
class CreateComponentDefaultTypeInternal;
extern CreateComponentDefaultTypeInternal _CreateComponent_default_instance_;
class CreateComponentParam;
class CreateComponentParamDefaultTypeInternal;
extern CreateComponentParamDefaultTypeInternal _CreateComponentParam_default_instance_;
class CreatePlayer;
class CreatePlayerDefaultTypeInternal;
extern CreatePlayerDefaultTypeInternal _CreatePlayer_default_instance_;
class CreatePlayerRs;
class CreatePlayerRsDefaultTypeInternal;
extern CreatePlayerRsDefaultTypeInternal _CreatePlayerRs_default_instance_;
class CreatePlayerToDB;
class CreatePlayerToDBDefaultTypeInternal;
extern CreatePlayerToDBDefaultTypeInternal _CreatePlayerToDB_default_instance_;
class CreatePlayerToDBRs;
class CreatePlayerToDBRsDefaultTypeInternal;
extern CreatePlayerToDBRsDefaultTypeInternal _CreatePlayerToDBRs_default_instance_;
class GameToken;
class GameTokenDefaultTypeInternal;
extern GameTokenDefaultTypeInternal _GameToken_default_instance_;
class Http;
class HttpDefaultTypeInternal;
extern HttpDefaultTypeInternal _Http_default_instance_;
class LoginByToken;
class LoginByTokenDefaultTypeInternal;
extern LoginByTokenDefaultTypeInternal _LoginByToken_default_instance_;
class LoginByTokenRs;
class LoginByTokenRsDefaultTypeInternal;
extern LoginByTokenRsDefaultTypeInternal _LoginByTokenRs_default_instance_;
class NetworkConnect;
class NetworkConnectDefaultTypeInternal;
extern NetworkConnectDefaultTypeInternal _NetworkConnect_default_instance_;
class NetworkDisconnect;
class NetworkDisconnectDefaultTypeInternal;
extern NetworkDisconnectDefaultTypeInternal _NetworkDisconnect_default_instance_;
class NetworkObjectKey;
class NetworkObjectKeyDefaultTypeInternal;
extern NetworkObjectKeyDefaultTypeInternal _NetworkObjectKey_default_instance_;
class NetworkObjectKeyValue;
class NetworkObjectKeyValueDefaultTypeInternal;
extern NetworkObjectKeyValueDefaultTypeInternal _NetworkObjectKeyValue_default_instance_;
class PlayerList;
class PlayerListDefaultTypeInternal;
extern PlayerListDefaultTypeInternal _PlayerList_default_instance_;
class PlayerLittle;
class PlayerLittleDefaultTypeInternal;
extern PlayerLittleDefaultTypeInternal _PlayerLittle_default_instance_;
class QueryPlayer;
class QueryPlayerDefaultTypeInternal;
extern QueryPlayerDefaultTypeInternal _QueryPlayer_default_instance_;
class QueryPlayerList;
class QueryPlayerListDefaultTypeInternal;
extern QueryPlayerListDefaultTypeInternal _QueryPlayerList_default_instance_;
class QueryPlayerRs;
class QueryPlayerRsDefaultTypeInternal;
extern QueryPlayerRsDefaultTypeInternal _QueryPlayerRs_default_instance_;
class RemoveComponent;
class RemoveComponentDefaultTypeInternal;
extern RemoveComponentDefaultTypeInternal _RemoveComponent_default_instance_;
class RobotState;
class RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
class RobotSyncState;
class RobotSyncStateDefaultTypeInternal;
extern RobotSyncStateDefaultTypeInternal _RobotSyncState_default_instance_;
class SavePlayer;
class SavePlayerDefaultTypeInternal;
extern SavePlayerDefaultTypeInternal _SavePlayer_default_instance_;
class SelectPlayer;
class SelectPlayerDefaultTypeInternal;
extern SelectPlayerDefaultTypeInternal _SelectPlayer_default_instance_;
class SelectPlayerRs;
class SelectPlayerRsDefaultTypeInternal;
extern SelectPlayerRsDefaultTypeInternal _SelectPlayerRs_default_instance_;
class WorldProxySyncToGather;
class WorldProxySyncToGatherDefaultTypeInternal;
extern WorldProxySyncToGatherDefaultTypeInternal _WorldProxySyncToGather_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::AccountCheck* Arena::CreateMaybeMessage<::Proto::AccountCheck>(Arena*);
template<> ::Proto::AccountCheckRs* Arena::CreateMaybeMessage<::Proto::AccountCheckRs>(Arena*);
template<> ::Proto::AppInfoListSync* Arena::CreateMaybeMessage<::Proto::AppInfoListSync>(Arena*);
template<> ::Proto::AppInfoSync* Arena::CreateMaybeMessage<::Proto::AppInfoSync>(Arena*);
template<> ::Proto::AppRegister* Arena::CreateMaybeMessage<::Proto::AppRegister>(Arena*);
template<> ::Proto::CmdApp* Arena::CreateMaybeMessage<::Proto::CmdApp>(Arena*);
template<> ::Proto::CmdThread* Arena::CreateMaybeMessage<::Proto::CmdThread>(Arena*);
template<> ::Proto::CreateComponent* Arena::CreateMaybeMessage<::Proto::CreateComponent>(Arena*);
template<> ::Proto::CreateComponentParam* Arena::CreateMaybeMessage<::Proto::CreateComponentParam>(Arena*);
template<> ::Proto::CreatePlayer* Arena::CreateMaybeMessage<::Proto::CreatePlayer>(Arena*);
template<> ::Proto::CreatePlayerRs* Arena::CreateMaybeMessage<::Proto::CreatePlayerRs>(Arena*);
template<> ::Proto::CreatePlayerToDB* Arena::CreateMaybeMessage<::Proto::CreatePlayerToDB>(Arena*);
template<> ::Proto::CreatePlayerToDBRs* Arena::CreateMaybeMessage<::Proto::CreatePlayerToDBRs>(Arena*);
template<> ::Proto::GameToken* Arena::CreateMaybeMessage<::Proto::GameToken>(Arena*);
template<> ::Proto::Http* Arena::CreateMaybeMessage<::Proto::Http>(Arena*);
template<> ::Proto::LoginByToken* Arena::CreateMaybeMessage<::Proto::LoginByToken>(Arena*);
template<> ::Proto::LoginByTokenRs* Arena::CreateMaybeMessage<::Proto::LoginByTokenRs>(Arena*);
template<> ::Proto::NetworkConnect* Arena::CreateMaybeMessage<::Proto::NetworkConnect>(Arena*);
template<> ::Proto::NetworkDisconnect* Arena::CreateMaybeMessage<::Proto::NetworkDisconnect>(Arena*);
template<> ::Proto::NetworkObjectKey* Arena::CreateMaybeMessage<::Proto::NetworkObjectKey>(Arena*);
template<> ::Proto::NetworkObjectKeyValue* Arena::CreateMaybeMessage<::Proto::NetworkObjectKeyValue>(Arena*);
template<> ::Proto::PlayerList* Arena::CreateMaybeMessage<::Proto::PlayerList>(Arena*);
template<> ::Proto::PlayerLittle* Arena::CreateMaybeMessage<::Proto::PlayerLittle>(Arena*);
template<> ::Proto::QueryPlayer* Arena::CreateMaybeMessage<::Proto::QueryPlayer>(Arena*);
template<> ::Proto::QueryPlayerList* Arena::CreateMaybeMessage<::Proto::QueryPlayerList>(Arena*);
template<> ::Proto::QueryPlayerRs* Arena::CreateMaybeMessage<::Proto::QueryPlayerRs>(Arena*);
template<> ::Proto::RemoveComponent* Arena::CreateMaybeMessage<::Proto::RemoveComponent>(Arena*);
template<> ::Proto::RobotState* Arena::CreateMaybeMessage<::Proto::RobotState>(Arena*);
template<> ::Proto::RobotSyncState* Arena::CreateMaybeMessage<::Proto::RobotSyncState>(Arena*);
template<> ::Proto::SavePlayer* Arena::CreateMaybeMessage<::Proto::SavePlayer>(Arena*);
template<> ::Proto::SelectPlayer* Arena::CreateMaybeMessage<::Proto::SelectPlayer>(Arena*);
template<> ::Proto::SelectPlayerRs* Arena::CreateMaybeMessage<::Proto::SelectPlayerRs>(Arena*);
template<> ::Proto::WorldProxySyncToGather* Arena::CreateMaybeMessage<::Proto::WorldProxySyncToGather>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum CmdThread_CmdType : int {
  CmdThread_CmdType_Entity = 0,
  CmdThread_CmdType_Pool = 1,
  CmdThread_CmdType_Connect = 2,
  CmdThread_CmdType_CmdThread_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdThread_CmdType_CmdThread_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdThread_CmdType_IsValid(int value);
constexpr CmdThread_CmdType CmdThread_CmdType_CmdType_MIN = CmdThread_CmdType_Entity;
constexpr CmdThread_CmdType CmdThread_CmdType_CmdType_MAX = CmdThread_CmdType_Connect;
constexpr int CmdThread_CmdType_CmdType_ARRAYSIZE = CmdThread_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdThread_CmdType_descriptor();
template<typename T>
inline const std::string& CmdThread_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdThread_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdThread_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdThread_CmdType_descriptor(), enum_t_value);
}
inline bool CmdThread_CmdType_Parse(
    const std::string& name, CmdThread_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdThread_CmdType>(
    CmdThread_CmdType_descriptor(), name, value);
}
enum CmdApp_CmdType : int {
  CmdApp_CmdType_Info = 0,
  CmdApp_CmdType_CmdApp_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdApp_CmdType_CmdApp_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdApp_CmdType_IsValid(int value);
constexpr CmdApp_CmdType CmdApp_CmdType_CmdType_MIN = CmdApp_CmdType_Info;
constexpr CmdApp_CmdType CmdApp_CmdType_CmdType_MAX = CmdApp_CmdType_Info;
constexpr int CmdApp_CmdType_CmdType_ARRAYSIZE = CmdApp_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdApp_CmdType_descriptor();
template<typename T>
inline const std::string& CmdApp_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdApp_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdApp_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdApp_CmdType_descriptor(), enum_t_value);
}
inline bool CmdApp_CmdType_Parse(
    const std::string& name, CmdApp_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdApp_CmdType>(
    CmdApp_CmdType_descriptor(), name, value);
}
enum CreateComponentParam_ParamType : int {
  CreateComponentParam_ParamType_Int = 0,
  CreateComponentParam_ParamType_String = 1,
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateComponentParam_ParamType_IsValid(int value);
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MIN = CreateComponentParam_ParamType_Int;
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MAX = CreateComponentParam_ParamType_String;
constexpr int CreateComponentParam_ParamType_ParamType_ARRAYSIZE = CreateComponentParam_ParamType_ParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateComponentParam_ParamType_descriptor();
template<typename T>
inline const std::string& CreateComponentParam_ParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateComponentParam_ParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateComponentParam_ParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateComponentParam_ParamType_descriptor(), enum_t_value);
}
inline bool CreateComponentParam_ParamType_Parse(
    const std::string& name, CreateComponentParam_ParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateComponentParam_ParamType>(
    CreateComponentParam_ParamType_descriptor(), name, value);
}
enum SelectPlayerRs_SelectPlayerReturnCode : int {
  SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK = 0,
  SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound = 1,
  SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerRs_SelectPlayerReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerRs_SelectPlayerReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelectPlayerRs_SelectPlayerReturnCode_IsValid(int value);
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MIN = SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK;
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX = SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound;
constexpr int SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_ARRAYSIZE = SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectPlayerRs_SelectPlayerReturnCode_descriptor();
template<typename T>
inline const std::string& SelectPlayerRs_SelectPlayerReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectPlayerRs_SelectPlayerReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectPlayerRs_SelectPlayerReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectPlayerRs_SelectPlayerReturnCode_descriptor(), enum_t_value);
}
inline bool SelectPlayerRs_SelectPlayerReturnCode_Parse(
    const std::string& name, SelectPlayerRs_SelectPlayerReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectPlayerRs_SelectPlayerReturnCode>(
    SelectPlayerRs_SelectPlayerReturnCode_descriptor(), name, value);
}
enum GameToken_ReturnCode : int {
  GameToken_ReturnCode_GameToken_OK = 0,
  GameToken_ReturnCode_GameToken_NO_GAME = 1,
  GameToken_ReturnCode_GameToken_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameToken_ReturnCode_GameToken_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameToken_ReturnCode_IsValid(int value);
constexpr GameToken_ReturnCode GameToken_ReturnCode_ReturnCode_MIN = GameToken_ReturnCode_GameToken_OK;
constexpr GameToken_ReturnCode GameToken_ReturnCode_ReturnCode_MAX = GameToken_ReturnCode_GameToken_NO_GAME;
constexpr int GameToken_ReturnCode_ReturnCode_ARRAYSIZE = GameToken_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameToken_ReturnCode_descriptor();
template<typename T>
inline const std::string& GameToken_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameToken_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameToken_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameToken_ReturnCode_descriptor(), enum_t_value);
}
inline bool GameToken_ReturnCode_Parse(
    const std::string& name, GameToken_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameToken_ReturnCode>(
    GameToken_ReturnCode_descriptor(), name, value);
}
enum LoginByTokenRs_ReturnCode : int {
  LoginByTokenRs_ReturnCode_LGRC_OK = 0,
  LoginByTokenRs_ReturnCode_LGRC_UNKONWN = 1,
  LoginByTokenRs_ReturnCode_LGRC_NOT_FOUND_ACCOUNT = 2,
  LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG = 3,
  LoginByTokenRs_ReturnCode_LoginByTokenRs_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginByTokenRs_ReturnCode_LoginByTokenRs_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginByTokenRs_ReturnCode_IsValid(int value);
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs_ReturnCode_ReturnCode_MIN = LoginByTokenRs_ReturnCode_LGRC_OK;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs_ReturnCode_ReturnCode_MAX = LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG;
constexpr int LoginByTokenRs_ReturnCode_ReturnCode_ARRAYSIZE = LoginByTokenRs_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginByTokenRs_ReturnCode_descriptor();
template<typename T>
inline const std::string& LoginByTokenRs_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginByTokenRs_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginByTokenRs_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginByTokenRs_ReturnCode_descriptor(), enum_t_value);
}
inline bool LoginByTokenRs_ReturnCode_Parse(
    const std::string& name, LoginByTokenRs_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginByTokenRs_ReturnCode>(
    LoginByTokenRs_ReturnCode_descriptor(), name, value);
}
enum NetworkObjectKeyType : int {
  ObjectKeyTypeNone = 0,
  ObjectKeyTypeAccount = 1,
  ObjectKeyTypeApp = 2,
  NetworkObjectKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetworkObjectKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetworkObjectKeyType_IsValid(int value);
constexpr NetworkObjectKeyType NetworkObjectKeyType_MIN = ObjectKeyTypeNone;
constexpr NetworkObjectKeyType NetworkObjectKeyType_MAX = ObjectKeyTypeApp;
constexpr int NetworkObjectKeyType_ARRAYSIZE = NetworkObjectKeyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkObjectKeyType_descriptor();
template<typename T>
inline const std::string& NetworkObjectKeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkObjectKeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkObjectKeyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkObjectKeyType_descriptor(), enum_t_value);
}
inline bool NetworkObjectKeyType_Parse(
    const std::string& name, NetworkObjectKeyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkObjectKeyType>(
    NetworkObjectKeyType_descriptor(), name, value);
}
enum AccountCheckReturnCode : int {
  ARC_OK = 0,
  ARC_UNKONWN = 1,
  ARC_NOT_FOUND_ACCOUNT = 2,
  ARC_PASSWORD_WRONG = 3,
  ARC_LOGGING = 4,
  ARC_TIMEOUT = 5,
  ARC_ONLINE = 6,
  AccountCheckReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountCheckReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountCheckReturnCode_IsValid(int value);
constexpr AccountCheckReturnCode AccountCheckReturnCode_MIN = ARC_OK;
constexpr AccountCheckReturnCode AccountCheckReturnCode_MAX = ARC_ONLINE;
constexpr int AccountCheckReturnCode_ARRAYSIZE = AccountCheckReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountCheckReturnCode_descriptor();
template<typename T>
inline const std::string& AccountCheckReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountCheckReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountCheckReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountCheckReturnCode_descriptor(), enum_t_value);
}
inline bool AccountCheckReturnCode_Parse(
    const std::string& name, AccountCheckReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountCheckReturnCode>(
    AccountCheckReturnCode_descriptor(), name, value);
}
enum LoginHttpReturnCode : int {
  LHRC_OK = 0,
  LHRC_TIMEOUT = 1,
  LHRC_NOTFOUND = 2,
  LoginHttpReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginHttpReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginHttpReturnCode_IsValid(int value);
constexpr LoginHttpReturnCode LoginHttpReturnCode_MIN = LHRC_OK;
constexpr LoginHttpReturnCode LoginHttpReturnCode_MAX = LHRC_NOTFOUND;
constexpr int LoginHttpReturnCode_ARRAYSIZE = LoginHttpReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginHttpReturnCode_descriptor();
template<typename T>
inline const std::string& LoginHttpReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginHttpReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginHttpReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginHttpReturnCode_descriptor(), enum_t_value);
}
inline bool LoginHttpReturnCode_Parse(
    const std::string& name, LoginHttpReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginHttpReturnCode>(
    LoginHttpReturnCode_descriptor(), name, value);
}
enum CreatePlayerReturnCode : int {
  CPR_Create_OK = 0,
  CPR_Unkonwn = 1,
  CPR_Rename = 2,
  CreatePlayerReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreatePlayerReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreatePlayerReturnCode_IsValid(int value);
constexpr CreatePlayerReturnCode CreatePlayerReturnCode_MIN = CPR_Create_OK;
constexpr CreatePlayerReturnCode CreatePlayerReturnCode_MAX = CPR_Rename;
constexpr int CreatePlayerReturnCode_ARRAYSIZE = CreatePlayerReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatePlayerReturnCode_descriptor();
template<typename T>
inline const std::string& CreatePlayerReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatePlayerReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatePlayerReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatePlayerReturnCode_descriptor(), enum_t_value);
}
inline bool CreatePlayerReturnCode_Parse(
    const std::string& name, CreatePlayerReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatePlayerReturnCode>(
    CreatePlayerReturnCode_descriptor(), name, value);
}
// ===================================================================

class CmdThread :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CmdThread) */ {
 public:
  CmdThread();
  virtual ~CmdThread();

  CmdThread(const CmdThread& from);
  CmdThread(CmdThread&& from) noexcept
    : CmdThread() {
    *this = ::std::move(from);
  }

  inline CmdThread& operator=(const CmdThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdThread& operator=(CmdThread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdThread* internal_default_instance() {
    return reinterpret_cast<const CmdThread*>(
               &_CmdThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CmdThread& a, CmdThread& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdThread* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdThread* New() const final {
    return CreateMaybeMessage<CmdThread>(nullptr);
  }

  CmdThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdThread& from);
  void MergeFrom(const CmdThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CmdThread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdThread_CmdType CmdType;
  static constexpr CmdType Entity =
    CmdThread_CmdType_Entity;
  static constexpr CmdType Pool =
    CmdThread_CmdType_Pool;
  static constexpr CmdType Connect =
    CmdThread_CmdType_Connect;
  static inline bool CmdType_IsValid(int value) {
    return CmdThread_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CmdThread_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CmdThread_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CmdThread_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CmdThread_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CmdThread_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CmdThread_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
  };
  // .Proto.CmdThread.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::Proto::CmdThread_CmdType cmd_type() const;
  void set_cmd_type(::Proto::CmdThread_CmdType value);

  // @@protoc_insertion_point(class_scope:Proto.CmdThread)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CmdApp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CmdApp) */ {
 public:
  CmdApp();
  virtual ~CmdApp();

  CmdApp(const CmdApp& from);
  CmdApp(CmdApp&& from) noexcept
    : CmdApp() {
    *this = ::std::move(from);
  }

  inline CmdApp& operator=(const CmdApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdApp& operator=(CmdApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdApp* internal_default_instance() {
    return reinterpret_cast<const CmdApp*>(
               &_CmdApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CmdApp& a, CmdApp& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdApp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdApp* New() const final {
    return CreateMaybeMessage<CmdApp>(nullptr);
  }

  CmdApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdApp& from);
  void MergeFrom(const CmdApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CmdApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdApp_CmdType CmdType;
  static constexpr CmdType Info =
    CmdApp_CmdType_Info;
  static inline bool CmdType_IsValid(int value) {
    return CmdApp_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CmdApp_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CmdApp_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CmdApp_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CmdApp_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CmdApp_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CmdApp_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
  };
  // .Proto.CmdApp.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::Proto::CmdApp_CmdType cmd_type() const;
  void set_cmd_type(::Proto::CmdApp_CmdType value);

  // @@protoc_insertion_point(class_scope:Proto.CmdApp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppRegister) */ {
 public:
  AppRegister();
  virtual ~AppRegister();

  AppRegister(const AppRegister& from);
  AppRegister(AppRegister&& from) noexcept
    : AppRegister() {
    *this = ::std::move(from);
  }

  inline AppRegister& operator=(const AppRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppRegister& operator=(AppRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppRegister* internal_default_instance() {
    return reinterpret_cast<const AppRegister*>(
               &_AppRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppRegister& a, AppRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(AppRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppRegister* New() const final {
    return CreateMaybeMessage<AppRegister>(nullptr);
  }

  AppRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppRegister& from);
  void MergeFrom(const AppRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AppRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppInfoSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppInfoSync) */ {
 public:
  AppInfoSync();
  virtual ~AppInfoSync();

  AppInfoSync(const AppInfoSync& from);
  AppInfoSync(AppInfoSync&& from) noexcept
    : AppInfoSync() {
    *this = ::std::move(from);
  }

  inline AppInfoSync& operator=(const AppInfoSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfoSync& operator=(AppInfoSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfoSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfoSync* internal_default_instance() {
    return reinterpret_cast<const AppInfoSync*>(
               &_AppInfoSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppInfoSync& a, AppInfoSync& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfoSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfoSync* New() const final {
    return CreateMaybeMessage<AppInfoSync>(nullptr);
  }

  AppInfoSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfoSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfoSync& from);
  void MergeFrom(const AppInfoSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfoSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppInfoSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kAppTypeFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // int32 app_id = 1;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_type = 2;
  void clear_app_type();
  ::PROTOBUF_NAMESPACE_ID::int32 app_type() const;
  void set_app_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 3;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AppInfoSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppInfoListSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppInfoListSync) */ {
 public:
  AppInfoListSync();
  virtual ~AppInfoListSync();

  AppInfoListSync(const AppInfoListSync& from);
  AppInfoListSync(AppInfoListSync&& from) noexcept
    : AppInfoListSync() {
    *this = ::std::move(from);
  }

  inline AppInfoListSync& operator=(const AppInfoListSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfoListSync& operator=(AppInfoListSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfoListSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfoListSync* internal_default_instance() {
    return reinterpret_cast<const AppInfoListSync*>(
               &_AppInfoListSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppInfoListSync& a, AppInfoListSync& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfoListSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfoListSync* New() const final {
    return CreateMaybeMessage<AppInfoListSync>(nullptr);
  }

  AppInfoListSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfoListSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfoListSync& from);
  void MergeFrom(const AppInfoListSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfoListSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppInfoListSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 1,
  };
  // repeated .Proto.AppInfoSync apps = 1;
  int apps_size() const;
  void clear_apps();
  ::Proto::AppInfoSync* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >*
      mutable_apps();
  const ::Proto::AppInfoSync& apps(int index) const;
  ::Proto::AppInfoSync* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >&
      apps() const;

  // @@protoc_insertion_point(class_scope:Proto.AppInfoListSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync > apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkDisconnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkDisconnect) */ {
 public:
  NetworkDisconnect();
  virtual ~NetworkDisconnect();

  NetworkDisconnect(const NetworkDisconnect& from);
  NetworkDisconnect(NetworkDisconnect&& from) noexcept
    : NetworkDisconnect() {
    *this = ::std::move(from);
  }

  inline NetworkDisconnect& operator=(const NetworkDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDisconnect& operator=(NetworkDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkDisconnect* internal_default_instance() {
    return reinterpret_cast<const NetworkDisconnect*>(
               &_NetworkDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetworkDisconnect& a, NetworkDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkDisconnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkDisconnect* New() const final {
    return CreateMaybeMessage<NetworkDisconnect>(nullptr);
  }

  NetworkDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDisconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkDisconnect& from);
  void MergeFrom(const NetworkDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDisconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkDisconnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkTypeFieldNumber = 1,
    kSocketFieldNumber = 2,
  };
  // int32 network_type = 1;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 socket = 2;
  void clear_socket();
  ::PROTOBUF_NAMESPACE_ID::int32 socket() const;
  void set_socket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkDisconnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 socket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkObjectKeyValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkObjectKeyValue) */ {
 public:
  NetworkObjectKeyValue();
  virtual ~NetworkObjectKeyValue();

  NetworkObjectKeyValue(const NetworkObjectKeyValue& from);
  NetworkObjectKeyValue(NetworkObjectKeyValue&& from) noexcept
    : NetworkObjectKeyValue() {
    *this = ::std::move(from);
  }

  inline NetworkObjectKeyValue& operator=(const NetworkObjectKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkObjectKeyValue& operator=(NetworkObjectKeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkObjectKeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkObjectKeyValue* internal_default_instance() {
    return reinterpret_cast<const NetworkObjectKeyValue*>(
               &_NetworkObjectKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetworkObjectKeyValue& a, NetworkObjectKeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkObjectKeyValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkObjectKeyValue* New() const final {
    return CreateMaybeMessage<NetworkObjectKeyValue>(nullptr);
  }

  NetworkObjectKeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkObjectKeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkObjectKeyValue& from);
  void MergeFrom(const NetworkObjectKeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkObjectKeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkObjectKeyValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyStrFieldNumber = 2,
    kKeyInt64FieldNumber = 1,
  };
  // string key_str = 2;
  void clear_key_str();
  const std::string& key_str() const;
  void set_key_str(const std::string& value);
  void set_key_str(std::string&& value);
  void set_key_str(const char* value);
  void set_key_str(const char* value, size_t size);
  std::string* mutable_key_str();
  std::string* release_key_str();
  void set_allocated_key_str(std::string* key_str);

  // int64 key_int64 = 1;
  void clear_key_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 key_int64() const;
  void set_key_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkObjectKeyValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_str_;
  ::PROTOBUF_NAMESPACE_ID::int64 key_int64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkObjectKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkObjectKey) */ {
 public:
  NetworkObjectKey();
  virtual ~NetworkObjectKey();

  NetworkObjectKey(const NetworkObjectKey& from);
  NetworkObjectKey(NetworkObjectKey&& from) noexcept
    : NetworkObjectKey() {
    *this = ::std::move(from);
  }

  inline NetworkObjectKey& operator=(const NetworkObjectKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkObjectKey& operator=(NetworkObjectKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkObjectKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkObjectKey* internal_default_instance() {
    return reinterpret_cast<const NetworkObjectKey*>(
               &_NetworkObjectKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetworkObjectKey& a, NetworkObjectKey& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkObjectKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkObjectKey* New() const final {
    return CreateMaybeMessage<NetworkObjectKey>(nullptr);
  }

  NetworkObjectKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkObjectKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkObjectKey& from);
  void MergeFrom(const NetworkObjectKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkObjectKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkObjectKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValueFieldNumber = 2,
    kKeyTypeFieldNumber = 1,
  };
  // .Proto.NetworkObjectKeyValue key_value = 2;
  bool has_key_value() const;
  void clear_key_value();
  const ::Proto::NetworkObjectKeyValue& key_value() const;
  ::Proto::NetworkObjectKeyValue* release_key_value();
  ::Proto::NetworkObjectKeyValue* mutable_key_value();
  void set_allocated_key_value(::Proto::NetworkObjectKeyValue* key_value);

  // .Proto.NetworkObjectKeyType key_type = 1;
  void clear_key_type();
  ::Proto::NetworkObjectKeyType key_type() const;
  void set_key_type(::Proto::NetworkObjectKeyType value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkObjectKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::NetworkObjectKeyValue* key_value_;
  int key_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkConnect) */ {
 public:
  NetworkConnect();
  virtual ~NetworkConnect();

  NetworkConnect(const NetworkConnect& from);
  NetworkConnect(NetworkConnect&& from) noexcept
    : NetworkConnect() {
    *this = ::std::move(from);
  }

  inline NetworkConnect& operator=(const NetworkConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConnect& operator=(NetworkConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkConnect* internal_default_instance() {
    return reinterpret_cast<const NetworkConnect*>(
               &_NetworkConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetworkConnect& a, NetworkConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConnect* New() const final {
    return CreateMaybeMessage<NetworkConnect>(nullptr);
  }

  NetworkConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConnect& from);
  void MergeFrom(const NetworkConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kKeyFieldNumber = 2,
    kNetworkTypeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // .Proto.NetworkObjectKey key = 2;
  bool has_key() const;
  void clear_key();
  const ::Proto::NetworkObjectKey& key() const;
  ::Proto::NetworkObjectKey* release_key();
  ::Proto::NetworkObjectKey* mutable_key();
  void set_allocated_key(::Proto::NetworkObjectKey* key);

  // int32 network_type = 1;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::Proto::NetworkObjectKey* key_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Http :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Http) */ {
 public:
  Http();
  virtual ~Http();

  Http(const Http& from);
  Http(Http&& from) noexcept
    : Http() {
    *this = ::std::move(from);
  }

  inline Http& operator=(const Http& from) {
    CopyFrom(from);
    return *this;
  }
  inline Http& operator=(Http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Http* internal_default_instance() {
    return reinterpret_cast<const Http*>(
               &_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Http& a, Http& b) {
    a.Swap(&b);
  }
  inline void Swap(Http* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Http* New() const final {
    return CreateMaybeMessage<Http>(nullptr);
  }

  Http* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Http>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Http& from);
  void MergeFrom(const Http& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Http* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Http";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string body = 1;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // int32 status_code = 2;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Http)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponentParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponentParam) */ {
 public:
  CreateComponentParam();
  virtual ~CreateComponentParam();

  CreateComponentParam(const CreateComponentParam& from);
  CreateComponentParam(CreateComponentParam&& from) noexcept
    : CreateComponentParam() {
    *this = ::std::move(from);
  }

  inline CreateComponentParam& operator=(const CreateComponentParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponentParam& operator=(CreateComponentParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateComponentParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateComponentParam* internal_default_instance() {
    return reinterpret_cast<const CreateComponentParam*>(
               &_CreateComponentParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateComponentParam& a, CreateComponentParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponentParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateComponentParam* New() const final {
    return CreateMaybeMessage<CreateComponentParam>(nullptr);
  }

  CreateComponentParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateComponentParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateComponentParam& from);
  void MergeFrom(const CreateComponentParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponentParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponentParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateComponentParam_ParamType ParamType;
  static constexpr ParamType Int =
    CreateComponentParam_ParamType_Int;
  static constexpr ParamType String =
    CreateComponentParam_ParamType_String;
  static inline bool ParamType_IsValid(int value) {
    return CreateComponentParam_ParamType_IsValid(value);
  }
  static constexpr ParamType ParamType_MIN =
    CreateComponentParam_ParamType_ParamType_MIN;
  static constexpr ParamType ParamType_MAX =
    CreateComponentParam_ParamType_ParamType_MAX;
  static constexpr int ParamType_ARRAYSIZE =
    CreateComponentParam_ParamType_ParamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamType_descriptor() {
    return CreateComponentParam_ParamType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamType_Name.");
    return CreateComponentParam_ParamType_Name(enum_t_value);
  }
  static inline bool ParamType_Parse(const std::string& name,
      ParamType* value) {
    return CreateComponentParam_ParamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringParamFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIntParamFieldNumber = 2,
  };
  // string string_param = 3;
  void clear_string_param();
  const std::string& string_param() const;
  void set_string_param(const std::string& value);
  void set_string_param(std::string&& value);
  void set_string_param(const char* value);
  void set_string_param(const char* value, size_t size);
  std::string* mutable_string_param();
  std::string* release_string_param();
  void set_allocated_string_param(std::string* string_param);

  // .Proto.CreateComponentParam.ParamType type = 1;
  void clear_type();
  ::Proto::CreateComponentParam_ParamType type() const;
  void set_type(::Proto::CreateComponentParam_ParamType value);

  // int32 int_param = 2;
  void clear_int_param();
  ::PROTOBUF_NAMESPACE_ID::int32 int_param() const;
  void set_int_param(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateComponentParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_param_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponent) */ {
 public:
  CreateComponent();
  virtual ~CreateComponent();

  CreateComponent(const CreateComponent& from);
  CreateComponent(CreateComponent&& from) noexcept
    : CreateComponent() {
    *this = ::std::move(from);
  }

  inline CreateComponent& operator=(const CreateComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponent& operator=(CreateComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateComponent* internal_default_instance() {
    return reinterpret_cast<const CreateComponent*>(
               &_CreateComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateComponent& a, CreateComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateComponent* New() const final {
    return CreateMaybeMessage<CreateComponent>(nullptr);
  }

  CreateComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateComponent& from);
  void MergeFrom(const CreateComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kClassNameFieldNumber = 2,
    kThreadTypeFieldNumber = 1,
    kIsToAllThreadFieldNumber = 3,
  };
  // repeated .Proto.CreateComponentParam params = 4;
  int params_size() const;
  void clear_params();
  ::Proto::CreateComponentParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
      mutable_params();
  const ::Proto::CreateComponentParam& params(int index) const;
  ::Proto::CreateComponentParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
      params() const;

  // string class_name = 2;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_to_all_thread = 3;
  void clear_is_to_all_thread();
  bool is_to_all_thread() const;
  void set_is_to_all_thread(bool value);

  // @@protoc_insertion_point(class_scope:Proto.CreateComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  bool is_to_all_thread_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RemoveComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RemoveComponent) */ {
 public:
  RemoveComponent();
  virtual ~RemoveComponent();

  RemoveComponent(const RemoveComponent& from);
  RemoveComponent(RemoveComponent&& from) noexcept
    : RemoveComponent() {
    *this = ::std::move(from);
  }

  inline RemoveComponent& operator=(const RemoveComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveComponent& operator=(RemoveComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveComponent* internal_default_instance() {
    return reinterpret_cast<const RemoveComponent*>(
               &_RemoveComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RemoveComponent& a, RemoveComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveComponent* New() const final {
    return CreateMaybeMessage<RemoveComponent>(nullptr);
  }

  RemoveComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveComponent& from);
  void MergeFrom(const RemoveComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RemoveComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RemoveComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountCheck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountCheck) */ {
 public:
  AccountCheck();
  virtual ~AccountCheck();

  AccountCheck(const AccountCheck& from);
  AccountCheck(AccountCheck&& from) noexcept
    : AccountCheck() {
    *this = ::std::move(from);
  }

  inline AccountCheck& operator=(const AccountCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCheck& operator=(AccountCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCheck* internal_default_instance() {
    return reinterpret_cast<const AccountCheck*>(
               &_AccountCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AccountCheck& a, AccountCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCheck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCheck* New() const final {
    return CreateMaybeMessage<AccountCheck>(nullptr);
  }

  AccountCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCheck& from);
  void MergeFrom(const AccountCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountCheck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:Proto.AccountCheck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountCheckRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountCheckRs) */ {
 public:
  AccountCheckRs();
  virtual ~AccountCheckRs();

  AccountCheckRs(const AccountCheckRs& from);
  AccountCheckRs(AccountCheckRs&& from) noexcept
    : AccountCheckRs() {
    *this = ::std::move(from);
  }

  inline AccountCheckRs& operator=(const AccountCheckRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCheckRs& operator=(AccountCheckRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCheckRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCheckRs* internal_default_instance() {
    return reinterpret_cast<const AccountCheckRs*>(
               &_AccountCheckRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AccountCheckRs& a, AccountCheckRs& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCheckRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCheckRs* New() const final {
    return CreateMaybeMessage<AccountCheckRs>(nullptr);
  }

  AccountCheckRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCheckRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCheckRs& from);
  void MergeFrom(const AccountCheckRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCheckRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountCheckRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.AccountCheckReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::AccountCheckReturnCode return_code() const;
  void set_return_code(::Proto::AccountCheckReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.AccountCheckRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotState) */ {
 public:
  RobotState();
  virtual ~RobotState();

  RobotState(const RobotState& from);
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotState& operator=(RobotState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotState* New() const final {
    return CreateMaybeMessage<RobotState>(nullptr);
  }

  RobotState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotState& from);
  void MergeFrom(const RobotState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RobotState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotSyncState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotSyncState) */ {
 public:
  RobotSyncState();
  virtual ~RobotSyncState();

  RobotSyncState(const RobotSyncState& from);
  RobotSyncState(RobotSyncState&& from) noexcept
    : RobotSyncState() {
    *this = ::std::move(from);
  }

  inline RobotSyncState& operator=(const RobotSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotSyncState& operator=(RobotSyncState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotSyncState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotSyncState* internal_default_instance() {
    return reinterpret_cast<const RobotSyncState*>(
               &_RobotSyncState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RobotSyncState& a, RobotSyncState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotSyncState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotSyncState* New() const final {
    return CreateMaybeMessage<RobotSyncState>(nullptr);
  }

  RobotSyncState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotSyncState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotSyncState& from);
  void MergeFrom(const RobotSyncState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotSyncState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotSyncState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .Proto.RobotState states = 1;
  int states_size() const;
  void clear_states();
  ::Proto::RobotState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >*
      mutable_states();
  const ::Proto::RobotState& states(int index) const;
  ::Proto::RobotState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >&
      states() const;

  // @@protoc_insertion_point(class_scope:Proto.RobotSyncState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState > states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerLittle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerLittle) */ {
 public:
  PlayerLittle();
  virtual ~PlayerLittle();

  PlayerLittle(const PlayerLittle& from);
  PlayerLittle(PlayerLittle&& from) noexcept
    : PlayerLittle() {
    *this = ::std::move(from);
  }

  inline PlayerLittle& operator=(const PlayerLittle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLittle& operator=(PlayerLittle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLittle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLittle* internal_default_instance() {
    return reinterpret_cast<const PlayerLittle*>(
               &_PlayerLittle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlayerLittle& a, PlayerLittle& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLittle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLittle* New() const final {
    return CreateMaybeMessage<PlayerLittle>(nullptr);
  }

  PlayerLittle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLittle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLittle& from);
  void MergeFrom(const PlayerLittle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLittle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerLittle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSnFieldNumber = 1,
    kGenderFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .Proto.Gender gender = 3;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerLittle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerList) */ {
 public:
  PlayerList();
  virtual ~PlayerList();

  PlayerList(const PlayerList& from);
  PlayerList(PlayerList&& from) noexcept
    : PlayerList() {
    *this = ::std::move(from);
  }

  inline PlayerList& operator=(const PlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerList& operator=(PlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerList* internal_default_instance() {
    return reinterpret_cast<const PlayerList*>(
               &_PlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlayerList& a, PlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerList* New() const final {
    return CreateMaybeMessage<PlayerList>(nullptr);
  }

  PlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerList& from);
  void MergeFrom(const PlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // repeated .Proto.PlayerLittle player = 2;
  int player_size() const;
  void clear_player();
  ::Proto::PlayerLittle* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >*
      mutable_player();
  const ::Proto::PlayerLittle& player(int index) const;
  ::Proto::PlayerLittle* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >&
      player() const;

  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.PlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle > player_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayerList) */ {
 public:
  QueryPlayerList();
  virtual ~QueryPlayerList();

  QueryPlayerList(const QueryPlayerList& from);
  QueryPlayerList(QueryPlayerList&& from) noexcept
    : QueryPlayerList() {
    *this = ::std::move(from);
  }

  inline QueryPlayerList& operator=(const QueryPlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayerList& operator=(QueryPlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayerList* internal_default_instance() {
    return reinterpret_cast<const QueryPlayerList*>(
               &_QueryPlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryPlayerList& a, QueryPlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayerList* New() const final {
    return CreateMaybeMessage<QueryPlayerList>(nullptr);
  }

  QueryPlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayerList& from);
  void MergeFrom(const QueryPlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayer) */ {
 public:
  QueryPlayer();
  virtual ~QueryPlayer();

  QueryPlayer(const QueryPlayer& from);
  QueryPlayer(QueryPlayer&& from) noexcept
    : QueryPlayer() {
    *this = ::std::move(from);
  }

  inline QueryPlayer& operator=(const QueryPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayer& operator=(QueryPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayer* internal_default_instance() {
    return reinterpret_cast<const QueryPlayer*>(
               &_QueryPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryPlayer& a, QueryPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayer* New() const final {
    return CreateMaybeMessage<QueryPlayer>(nullptr);
  }

  QueryPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayer& from);
  void MergeFrom(const QueryPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayerRs) */ {
 public:
  QueryPlayerRs();
  virtual ~QueryPlayerRs();

  QueryPlayerRs(const QueryPlayerRs& from);
  QueryPlayerRs(QueryPlayerRs&& from) noexcept
    : QueryPlayerRs() {
    *this = ::std::move(from);
  }

  inline QueryPlayerRs& operator=(const QueryPlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayerRs& operator=(QueryPlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayerRs* internal_default_instance() {
    return reinterpret_cast<const QueryPlayerRs*>(
               &_QueryPlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryPlayerRs& a, QueryPlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayerRs* New() const final {
    return CreateMaybeMessage<QueryPlayerRs>(nullptr);
  }

  QueryPlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayerRs& from);
  void MergeFrom(const QueryPlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayer) */ {
 public:
  CreatePlayer();
  virtual ~CreatePlayer();

  CreatePlayer(const CreatePlayer& from);
  CreatePlayer(CreatePlayer&& from) noexcept
    : CreatePlayer() {
    *this = ::std::move(from);
  }

  inline CreatePlayer& operator=(const CreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayer& operator=(CreatePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayer* internal_default_instance() {
    return reinterpret_cast<const CreatePlayer*>(
               &_CreatePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreatePlayer& a, CreatePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayer* New() const final {
    return CreateMaybeMessage<CreatePlayer>(nullptr);
  }

  CreatePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayer& from);
  void MergeFrom(const CreatePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGenderFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.Gender gender = 2;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayerRs) */ {
 public:
  CreatePlayerRs();
  virtual ~CreatePlayerRs();

  CreatePlayerRs(const CreatePlayerRs& from);
  CreatePlayerRs(CreatePlayerRs&& from) noexcept
    : CreatePlayerRs() {
    *this = ::std::move(from);
  }

  inline CreatePlayerRs& operator=(const CreatePlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerRs& operator=(CreatePlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayerRs* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerRs*>(
               &_CreatePlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreatePlayerRs& a, CreatePlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayerRs* New() const final {
    return CreateMaybeMessage<CreatePlayerRs>(nullptr);
  }

  CreatePlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayerRs& from);
  void MergeFrom(const CreatePlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 2,
  };
  // .Proto.CreatePlayerReturnCode return_code = 2;
  void clear_return_code();
  ::Proto::CreatePlayerReturnCode return_code() const;
  void set_return_code(::Proto::CreatePlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerToDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayerToDB) */ {
 public:
  CreatePlayerToDB();
  virtual ~CreatePlayerToDB();

  CreatePlayerToDB(const CreatePlayerToDB& from);
  CreatePlayerToDB(CreatePlayerToDB&& from) noexcept
    : CreatePlayerToDB() {
    *this = ::std::move(from);
  }

  inline CreatePlayerToDB& operator=(const CreatePlayerToDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerToDB& operator=(CreatePlayerToDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayerToDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayerToDB* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerToDB*>(
               &_CreatePlayerToDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CreatePlayerToDB& a, CreatePlayerToDB& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerToDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayerToDB* New() const final {
    return CreateMaybeMessage<CreatePlayerToDB>(nullptr);
  }

  CreatePlayerToDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayerToDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayerToDB& from);
  void MergeFrom(const CreatePlayerToDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerToDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayerToDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPlayerFieldNumber = 3,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 3;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayerToDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerToDBRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayerToDBRs) */ {
 public:
  CreatePlayerToDBRs();
  virtual ~CreatePlayerToDBRs();

  CreatePlayerToDBRs(const CreatePlayerToDBRs& from);
  CreatePlayerToDBRs(CreatePlayerToDBRs&& from) noexcept
    : CreatePlayerToDBRs() {
    *this = ::std::move(from);
  }

  inline CreatePlayerToDBRs& operator=(const CreatePlayerToDBRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerToDBRs& operator=(CreatePlayerToDBRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayerToDBRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayerToDBRs* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerToDBRs*>(
               &_CreatePlayerToDBRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CreatePlayerToDBRs& a, CreatePlayerToDBRs& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerToDBRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayerToDBRs* New() const final {
    return CreateMaybeMessage<CreatePlayerToDBRs>(nullptr);
  }

  CreatePlayerToDBRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayerToDBRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayerToDBRs& from);
  void MergeFrom(const CreatePlayerToDBRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerToDBRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayerToDBRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kReturnCodeFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.CreatePlayerReturnCode return_code = 2;
  void clear_return_code();
  ::Proto::CreatePlayerReturnCode return_code() const;
  void set_return_code(::Proto::CreatePlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayerToDBRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SelectPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SelectPlayer) */ {
 public:
  SelectPlayer();
  virtual ~SelectPlayer();

  SelectPlayer(const SelectPlayer& from);
  SelectPlayer(SelectPlayer&& from) noexcept
    : SelectPlayer() {
    *this = ::std::move(from);
  }

  inline SelectPlayer& operator=(const SelectPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPlayer& operator=(SelectPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPlayer* internal_default_instance() {
    return reinterpret_cast<const SelectPlayer*>(
               &_SelectPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SelectPlayer& a, SelectPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPlayer* New() const final {
    return CreateMaybeMessage<SelectPlayer>(nullptr);
  }

  SelectPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectPlayer& from);
  void MergeFrom(const SelectPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SelectPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SelectPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SelectPlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SelectPlayerRs) */ {
 public:
  SelectPlayerRs();
  virtual ~SelectPlayerRs();

  SelectPlayerRs(const SelectPlayerRs& from);
  SelectPlayerRs(SelectPlayerRs&& from) noexcept
    : SelectPlayerRs() {
    *this = ::std::move(from);
  }

  inline SelectPlayerRs& operator=(const SelectPlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPlayerRs& operator=(SelectPlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectPlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPlayerRs* internal_default_instance() {
    return reinterpret_cast<const SelectPlayerRs*>(
               &_SelectPlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SelectPlayerRs& a, SelectPlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPlayerRs* New() const final {
    return CreateMaybeMessage<SelectPlayerRs>(nullptr);
  }

  SelectPlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectPlayerRs& from);
  void MergeFrom(const SelectPlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectPlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SelectPlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SelectPlayerRs_SelectPlayerReturnCode SelectPlayerReturnCode;
  static constexpr SelectPlayerReturnCode SPRC_OK =
    SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK;
  static constexpr SelectPlayerReturnCode SPRC_NotFound =
    SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound;
  static inline bool SelectPlayerReturnCode_IsValid(int value) {
    return SelectPlayerRs_SelectPlayerReturnCode_IsValid(value);
  }
  static constexpr SelectPlayerReturnCode SelectPlayerReturnCode_MIN =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MIN;
  static constexpr SelectPlayerReturnCode SelectPlayerReturnCode_MAX =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX;
  static constexpr int SelectPlayerReturnCode_ARRAYSIZE =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectPlayerReturnCode_descriptor() {
    return SelectPlayerRs_SelectPlayerReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectPlayerReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectPlayerReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectPlayerReturnCode_Name.");
    return SelectPlayerRs_SelectPlayerReturnCode_Name(enum_t_value);
  }
  static inline bool SelectPlayerReturnCode_Parse(const std::string& name,
      SelectPlayerReturnCode* value) {
    return SelectPlayerRs_SelectPlayerReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::SelectPlayerRs_SelectPlayerReturnCode return_code() const;
  void set_return_code(::Proto::SelectPlayerRs_SelectPlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.SelectPlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SavePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SavePlayer) */ {
 public:
  SavePlayer();
  virtual ~SavePlayer();

  SavePlayer(const SavePlayer& from);
  SavePlayer(SavePlayer&& from) noexcept
    : SavePlayer() {
    *this = ::std::move(from);
  }

  inline SavePlayer& operator=(const SavePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePlayer& operator=(SavePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavePlayer* internal_default_instance() {
    return reinterpret_cast<const SavePlayer*>(
               &_SavePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SavePlayer& a, SavePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SavePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavePlayer* New() const final {
    return CreateMaybeMessage<SavePlayer>(nullptr);
  }

  SavePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePlayer& from);
  void MergeFrom(const SavePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SavePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kPlayerSnFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SavePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldProxySyncToGather :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldProxySyncToGather) */ {
 public:
  WorldProxySyncToGather();
  virtual ~WorldProxySyncToGather();

  WorldProxySyncToGather(const WorldProxySyncToGather& from);
  WorldProxySyncToGather(WorldProxySyncToGather&& from) noexcept
    : WorldProxySyncToGather() {
    *this = ::std::move(from);
  }

  inline WorldProxySyncToGather& operator=(const WorldProxySyncToGather& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldProxySyncToGather& operator=(WorldProxySyncToGather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldProxySyncToGather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldProxySyncToGather* internal_default_instance() {
    return reinterpret_cast<const WorldProxySyncToGather*>(
               &_WorldProxySyncToGather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WorldProxySyncToGather& a, WorldProxySyncToGather& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldProxySyncToGather* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldProxySyncToGather* New() const final {
    return CreateMaybeMessage<WorldProxySyncToGather>(nullptr);
  }

  WorldProxySyncToGather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldProxySyncToGather>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldProxySyncToGather& from);
  void MergeFrom(const WorldProxySyncToGather& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldProxySyncToGather* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldProxySyncToGather";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kWorldProxySnFieldNumber = 2,
    kWorldIdFieldNumber = 3,
    kOnlineFieldNumber = 4,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 world_proxy_sn = 2;
  void clear_world_proxy_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_proxy_sn() const;
  void set_world_proxy_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 4;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.WorldProxySyncToGather)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_proxy_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GameToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GameToken) */ {
 public:
  GameToken();
  virtual ~GameToken();

  GameToken(const GameToken& from);
  GameToken(GameToken&& from) noexcept
    : GameToken() {
    *this = ::std::move(from);
  }

  inline GameToken& operator=(const GameToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameToken& operator=(GameToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameToken* internal_default_instance() {
    return reinterpret_cast<const GameToken*>(
               &_GameToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GameToken& a, GameToken& b) {
    a.Swap(&b);
  }
  inline void Swap(GameToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameToken* New() const final {
    return CreateMaybeMessage<GameToken>(nullptr);
  }

  GameToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameToken& from);
  void MergeFrom(const GameToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GameToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameToken_ReturnCode ReturnCode;
  static constexpr ReturnCode GameToken_OK =
    GameToken_ReturnCode_GameToken_OK;
  static constexpr ReturnCode GameToken_NO_GAME =
    GameToken_ReturnCode_GameToken_NO_GAME;
  static inline bool ReturnCode_IsValid(int value) {
    return GameToken_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    GameToken_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    GameToken_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    GameToken_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return GameToken_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return GameToken_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return GameToken_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kIpFieldNumber = 3,
    kReturnCodeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // .Proto.GameToken.ReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::GameToken_ReturnCode return_code() const;
  void set_return_code(::Proto::GameToken_ReturnCode value);

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.GameToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int return_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginByToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginByToken) */ {
 public:
  LoginByToken();
  virtual ~LoginByToken();

  LoginByToken(const LoginByToken& from);
  LoginByToken(LoginByToken&& from) noexcept
    : LoginByToken() {
    *this = ::std::move(from);
  }

  inline LoginByToken& operator=(const LoginByToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginByToken& operator=(LoginByToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginByToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginByToken* internal_default_instance() {
    return reinterpret_cast<const LoginByToken*>(
               &_LoginByToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LoginByToken& a, LoginByToken& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginByToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginByToken* New() const final {
    return CreateMaybeMessage<LoginByToken>(nullptr);
  }

  LoginByToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginByToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginByToken& from);
  void MergeFrom(const LoginByToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginByToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginByToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:Proto.LoginByToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginByTokenRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginByTokenRs) */ {
 public:
  LoginByTokenRs();
  virtual ~LoginByTokenRs();

  LoginByTokenRs(const LoginByTokenRs& from);
  LoginByTokenRs(LoginByTokenRs&& from) noexcept
    : LoginByTokenRs() {
    *this = ::std::move(from);
  }

  inline LoginByTokenRs& operator=(const LoginByTokenRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginByTokenRs& operator=(LoginByTokenRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginByTokenRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginByTokenRs* internal_default_instance() {
    return reinterpret_cast<const LoginByTokenRs*>(
               &_LoginByTokenRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(LoginByTokenRs& a, LoginByTokenRs& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginByTokenRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginByTokenRs* New() const final {
    return CreateMaybeMessage<LoginByTokenRs>(nullptr);
  }

  LoginByTokenRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginByTokenRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginByTokenRs& from);
  void MergeFrom(const LoginByTokenRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginByTokenRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginByTokenRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginByTokenRs_ReturnCode ReturnCode;
  static constexpr ReturnCode LGRC_OK =
    LoginByTokenRs_ReturnCode_LGRC_OK;
  static constexpr ReturnCode LGRC_UNKONWN =
    LoginByTokenRs_ReturnCode_LGRC_UNKONWN;
  static constexpr ReturnCode LGRC_NOT_FOUND_ACCOUNT =
    LoginByTokenRs_ReturnCode_LGRC_NOT_FOUND_ACCOUNT;
  static constexpr ReturnCode LGRC_TOKEN_WRONG =
    LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG;
  static inline bool ReturnCode_IsValid(int value) {
    return LoginByTokenRs_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    LoginByTokenRs_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    LoginByTokenRs_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    LoginByTokenRs_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return LoginByTokenRs_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return LoginByTokenRs_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return LoginByTokenRs_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::LoginByTokenRs_ReturnCode return_code() const;
  void set_return_code(::Proto::LoginByTokenRs_ReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.LoginByTokenRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CmdThread

// .Proto.CmdThread.CmdType cmd_type = 1;
inline void CmdThread::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::Proto::CmdThread_CmdType CmdThread::cmd_type() const {
  // @@protoc_insertion_point(field_get:Proto.CmdThread.cmd_type)
  return static_cast< ::Proto::CmdThread_CmdType >(cmd_type_);
}
inline void CmdThread::set_cmd_type(::Proto::CmdThread_CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CmdThread.cmd_type)
}

// -------------------------------------------------------------------

// CmdApp

// .Proto.CmdApp.CmdType cmd_type = 1;
inline void CmdApp::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::Proto::CmdApp_CmdType CmdApp::cmd_type() const {
  // @@protoc_insertion_point(field_get:Proto.CmdApp.cmd_type)
  return static_cast< ::Proto::CmdApp_CmdType >(cmd_type_);
}
inline void CmdApp::set_cmd_type(::Proto::CmdApp_CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CmdApp.cmd_type)
}

// -------------------------------------------------------------------

// AppRegister

// int32 type = 1;
inline void AppRegister::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppRegister::type() const {
  // @@protoc_insertion_point(field_get:Proto.AppRegister.type)
  return type_;
}
inline void AppRegister::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppRegister.type)
}

// int32 id = 2;
inline void AppRegister::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppRegister::id() const {
  // @@protoc_insertion_point(field_get:Proto.AppRegister.id)
  return id_;
}
inline void AppRegister::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppRegister.id)
}

// -------------------------------------------------------------------

// AppInfoSync

// int32 app_id = 1;
inline void AppInfoSync::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::app_id() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.app_id)
  return app_id_;
}
inline void AppInfoSync::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.app_id)
}

// int32 app_type = 2;
inline void AppInfoSync::clear_app_type() {
  app_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::app_type() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.app_type)
  return app_type_;
}
inline void AppInfoSync::set_app_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.app_type)
}

// int32 online = 3;
inline void AppInfoSync::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::online() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.online)
  return online_;
}
inline void AppInfoSync::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.online)
}

// -------------------------------------------------------------------

// AppInfoListSync

// repeated .Proto.AppInfoSync apps = 1;
inline int AppInfoListSync::apps_size() const {
  return apps_.size();
}
inline void AppInfoListSync::clear_apps() {
  apps_.Clear();
}
inline ::Proto::AppInfoSync* AppInfoListSync::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AppInfoListSync.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >*
AppInfoListSync::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AppInfoListSync.apps)
  return &apps_;
}
inline const ::Proto::AppInfoSync& AppInfoListSync::apps(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoListSync.apps)
  return apps_.Get(index);
}
inline ::Proto::AppInfoSync* AppInfoListSync::add_apps() {
  // @@protoc_insertion_point(field_add:Proto.AppInfoListSync.apps)
  return apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >&
AppInfoListSync::apps() const {
  // @@protoc_insertion_point(field_list:Proto.AppInfoListSync.apps)
  return apps_;
}

// -------------------------------------------------------------------

// NetworkDisconnect

// int32 network_type = 1;
inline void NetworkDisconnect::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkDisconnect::network_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkDisconnect.network_type)
  return network_type_;
}
inline void NetworkDisconnect::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkDisconnect.network_type)
}

// int32 socket = 2;
inline void NetworkDisconnect::clear_socket() {
  socket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkDisconnect::socket() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkDisconnect.socket)
  return socket_;
}
inline void NetworkDisconnect::set_socket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkDisconnect.socket)
}

// -------------------------------------------------------------------

// NetworkObjectKeyValue

// int64 key_int64 = 1;
inline void NetworkObjectKeyValue::clear_key_int64() {
  key_int64_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkObjectKeyValue::key_int64() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkObjectKeyValue.key_int64)
  return key_int64_;
}
inline void NetworkObjectKeyValue::set_key_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  key_int64_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkObjectKeyValue.key_int64)
}

// string key_str = 2;
inline void NetworkObjectKeyValue::clear_key_str() {
  key_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkObjectKeyValue::key_str() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkObjectKeyValue.key_str)
  return key_str_.GetNoArena();
}
inline void NetworkObjectKeyValue::set_key_str(const std::string& value) {
  
  key_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.NetworkObjectKeyValue.key_str)
}
inline void NetworkObjectKeyValue::set_key_str(std::string&& value) {
  
  key_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.NetworkObjectKeyValue.key_str)
}
inline void NetworkObjectKeyValue::set_key_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.NetworkObjectKeyValue.key_str)
}
inline void NetworkObjectKeyValue::set_key_str(const char* value, size_t size) {
  
  key_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.NetworkObjectKeyValue.key_str)
}
inline std::string* NetworkObjectKeyValue::mutable_key_str() {
  
  // @@protoc_insertion_point(field_mutable:Proto.NetworkObjectKeyValue.key_str)
  return key_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkObjectKeyValue::release_key_str() {
  // @@protoc_insertion_point(field_release:Proto.NetworkObjectKeyValue.key_str)
  
  return key_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkObjectKeyValue::set_allocated_key_str(std::string* key_str) {
  if (key_str != nullptr) {
    
  } else {
    
  }
  key_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_str);
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkObjectKeyValue.key_str)
}

// -------------------------------------------------------------------

// NetworkObjectKey

// .Proto.NetworkObjectKeyType key_type = 1;
inline void NetworkObjectKey::clear_key_type() {
  key_type_ = 0;
}
inline ::Proto::NetworkObjectKeyType NetworkObjectKey::key_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkObjectKey.key_type)
  return static_cast< ::Proto::NetworkObjectKeyType >(key_type_);
}
inline void NetworkObjectKey::set_key_type(::Proto::NetworkObjectKeyType value) {
  
  key_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkObjectKey.key_type)
}

// .Proto.NetworkObjectKeyValue key_value = 2;
inline bool NetworkObjectKey::has_key_value() const {
  return this != internal_default_instance() && key_value_ != nullptr;
}
inline void NetworkObjectKey::clear_key_value() {
  if (GetArenaNoVirtual() == nullptr && key_value_ != nullptr) {
    delete key_value_;
  }
  key_value_ = nullptr;
}
inline const ::Proto::NetworkObjectKeyValue& NetworkObjectKey::key_value() const {
  const ::Proto::NetworkObjectKeyValue* p = key_value_;
  // @@protoc_insertion_point(field_get:Proto.NetworkObjectKey.key_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::NetworkObjectKeyValue*>(
      &::Proto::_NetworkObjectKeyValue_default_instance_);
}
inline ::Proto::NetworkObjectKeyValue* NetworkObjectKey::release_key_value() {
  // @@protoc_insertion_point(field_release:Proto.NetworkObjectKey.key_value)
  
  ::Proto::NetworkObjectKeyValue* temp = key_value_;
  key_value_ = nullptr;
  return temp;
}
inline ::Proto::NetworkObjectKeyValue* NetworkObjectKey::mutable_key_value() {
  
  if (key_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::NetworkObjectKeyValue>(GetArenaNoVirtual());
    key_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.NetworkObjectKey.key_value)
  return key_value_;
}
inline void NetworkObjectKey::set_allocated_key_value(::Proto::NetworkObjectKeyValue* key_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete key_value_;
  }
  if (key_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_value, submessage_arena);
    }
    
  } else {
    
  }
  key_value_ = key_value;
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkObjectKey.key_value)
}

// -------------------------------------------------------------------

// NetworkConnect

// int32 network_type = 1;
inline void NetworkConnect::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkConnect::network_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.network_type)
  return network_type_;
}
inline void NetworkConnect::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.network_type)
}

// .Proto.NetworkObjectKey key = 2;
inline bool NetworkConnect::has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline void NetworkConnect::clear_key() {
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::Proto::NetworkObjectKey& NetworkConnect::key() const {
  const ::Proto::NetworkObjectKey* p = key_;
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.key)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::NetworkObjectKey*>(
      &::Proto::_NetworkObjectKey_default_instance_);
}
inline ::Proto::NetworkObjectKey* NetworkConnect::release_key() {
  // @@protoc_insertion_point(field_release:Proto.NetworkConnect.key)
  
  ::Proto::NetworkObjectKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::Proto::NetworkObjectKey* NetworkConnect::mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::NetworkObjectKey>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.NetworkConnect.key)
  return key_;
}
inline void NetworkConnect::set_allocated_key(::Proto::NetworkObjectKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkConnect.key)
}

// string ip = 3;
inline void NetworkConnect::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkConnect::ip() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.ip)
  return ip_.GetNoArena();
}
inline void NetworkConnect::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.NetworkConnect.ip)
}
inline std::string* NetworkConnect::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Proto.NetworkConnect.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkConnect::release_ip() {
  // @@protoc_insertion_point(field_release:Proto.NetworkConnect.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkConnect::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkConnect.ip)
}

// int32 port = 4;
inline void NetworkConnect::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkConnect::port() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.port)
  return port_;
}
inline void NetworkConnect::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.port)
}

// -------------------------------------------------------------------

// Http

// string body = 1;
inline void Http::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Http::body() const {
  // @@protoc_insertion_point(field_get:Proto.Http.body)
  return body_.GetNoArena();
}
inline void Http::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Http.body)
}
inline void Http::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Http.body)
}
inline void Http::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Http.body)
}
inline void Http::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Http.body)
}
inline std::string* Http::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Http.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Http::release_body() {
  // @@protoc_insertion_point(field_release:Proto.Http.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Http::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:Proto.Http.body)
}

// int32 status_code = 2;
inline void Http::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Http::status_code() const {
  // @@protoc_insertion_point(field_get:Proto.Http.status_code)
  return status_code_;
}
inline void Http::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.Http.status_code)
}

// -------------------------------------------------------------------

// CreateComponentParam

// .Proto.CreateComponentParam.ParamType type = 1;
inline void CreateComponentParam::clear_type() {
  type_ = 0;
}
inline ::Proto::CreateComponentParam_ParamType CreateComponentParam::type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.type)
  return static_cast< ::Proto::CreateComponentParam_ParamType >(type_);
}
inline void CreateComponentParam::set_type(::Proto::CreateComponentParam_ParamType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.type)
}

// int32 int_param = 2;
inline void CreateComponentParam::clear_int_param() {
  int_param_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateComponentParam::int_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.int_param)
  return int_param_;
}
inline void CreateComponentParam::set_int_param(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int_param_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.int_param)
}

// string string_param = 3;
inline void CreateComponentParam::clear_string_param() {
  string_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateComponentParam::string_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.string_param)
  return string_param_.GetNoArena();
}
inline void CreateComponentParam::set_string_param(const std::string& value) {
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(std::string&& value) {
  
  string_param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(const char* value, size_t size) {
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateComponentParam.string_param)
}
inline std::string* CreateComponentParam::mutable_string_param() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponentParam.string_param)
  return string_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateComponentParam::release_string_param() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponentParam.string_param)
  
  return string_param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateComponentParam::set_allocated_string_param(std::string* string_param) {
  if (string_param != nullptr) {
    
  } else {
    
  }
  string_param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_param);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponentParam.string_param)
}

// -------------------------------------------------------------------

// CreateComponent

// int32 thread_type = 1;
inline void CreateComponent::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateComponent::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.thread_type)
  return thread_type_;
}
inline void CreateComponent::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.thread_type)
}

// string class_name = 2;
inline void CreateComponent::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateComponent::class_name() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.class_name)
  return class_name_.GetNoArena();
}
inline void CreateComponent::set_class_name(const std::string& value) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(std::string&& value) {
  
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateComponent.class_name)
}
inline std::string* CreateComponent::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateComponent::release_class_name() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponent.class_name)
  
  return class_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateComponent::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponent.class_name)
}

// bool is_to_all_thread = 3;
inline void CreateComponent::clear_is_to_all_thread() {
  is_to_all_thread_ = false;
}
inline bool CreateComponent::is_to_all_thread() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.is_to_all_thread)
  return is_to_all_thread_;
}
inline void CreateComponent::set_is_to_all_thread(bool value) {
  
  is_to_all_thread_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.is_to_all_thread)
}

// repeated .Proto.CreateComponentParam params = 4;
inline int CreateComponent::params_size() const {
  return params_.size();
}
inline void CreateComponent::clear_params() {
  params_.Clear();
}
inline ::Proto::CreateComponentParam* CreateComponent::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
CreateComponent::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.CreateComponent.params)
  return &params_;
}
inline const ::Proto::CreateComponentParam& CreateComponent::params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.params)
  return params_.Get(index);
}
inline ::Proto::CreateComponentParam* CreateComponent::add_params() {
  // @@protoc_insertion_point(field_add:Proto.CreateComponent.params)
  return params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
CreateComponent::params() const {
  // @@protoc_insertion_point(field_list:Proto.CreateComponent.params)
  return params_;
}

// -------------------------------------------------------------------

// RemoveComponent

// uint64 sn = 1;
inline void RemoveComponent::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveComponent::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RemoveComponent.sn)
  return sn_;
}
inline void RemoveComponent::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RemoveComponent.sn)
}

// -------------------------------------------------------------------

// AccountCheck

// string account = 1;
inline void AccountCheck::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCheck::account() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.account)
  return account_.GetNoArena();
}
inline void AccountCheck::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.account)
}
inline void AccountCheck::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountCheck.account)
}
inline void AccountCheck::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountCheck.account)
}
inline void AccountCheck::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountCheck.account)
}
inline std::string* AccountCheck::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountCheck.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCheck::release_account() {
  // @@protoc_insertion_point(field_release:Proto.AccountCheck.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCheck::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountCheck.account)
}

// string password = 2;
inline void AccountCheck::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCheck::password() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.password)
  return password_.GetNoArena();
}
inline void AccountCheck::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.password)
}
inline void AccountCheck::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountCheck.password)
}
inline void AccountCheck::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountCheck.password)
}
inline void AccountCheck::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountCheck.password)
}
inline std::string* AccountCheck::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountCheck.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCheck::release_password() {
  // @@protoc_insertion_point(field_release:Proto.AccountCheck.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCheck::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountCheck.password)
}

// -------------------------------------------------------------------

// AccountCheckRs

// .Proto.AccountCheckReturnCode return_code = 1;
inline void AccountCheckRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::AccountCheckReturnCode AccountCheckRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheckRs.return_code)
  return static_cast< ::Proto::AccountCheckReturnCode >(return_code_);
}
inline void AccountCheckRs::set_return_code(::Proto::AccountCheckReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.AccountCheckRs.return_code)
}

// -------------------------------------------------------------------

// RobotState

// string account = 1;
inline void RobotState::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RobotState::account() const {
  // @@protoc_insertion_point(field_get:Proto.RobotState.account)
  return account_.GetNoArena();
}
inline void RobotState::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RobotState.account)
}
inline void RobotState::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RobotState.account)
}
inline void RobotState::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RobotState.account)
}
inline void RobotState::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RobotState.account)
}
inline std::string* RobotState::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RobotState.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RobotState::release_account() {
  // @@protoc_insertion_point(field_release:Proto.RobotState.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RobotState::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.RobotState.account)
}

// int32 state = 2;
inline void RobotState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotState::state() const {
  // @@protoc_insertion_point(field_get:Proto.RobotState.state)
  return state_;
}
inline void RobotState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Proto.RobotState.state)
}

// -------------------------------------------------------------------

// RobotSyncState

// repeated .Proto.RobotState states = 1;
inline int RobotSyncState::states_size() const {
  return states_.size();
}
inline void RobotSyncState::clear_states() {
  states_.Clear();
}
inline ::Proto::RobotState* RobotSyncState::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.RobotSyncState.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >*
RobotSyncState::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:Proto.RobotSyncState.states)
  return &states_;
}
inline const ::Proto::RobotState& RobotSyncState::states(int index) const {
  // @@protoc_insertion_point(field_get:Proto.RobotSyncState.states)
  return states_.Get(index);
}
inline ::Proto::RobotState* RobotSyncState::add_states() {
  // @@protoc_insertion_point(field_add:Proto.RobotSyncState.states)
  return states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >&
RobotSyncState::states() const {
  // @@protoc_insertion_point(field_list:Proto.RobotSyncState.states)
  return states_;
}

// -------------------------------------------------------------------

// PlayerLittle

// uint64 sn = 1;
inline void PlayerLittle::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerLittle::sn() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.sn)
  return sn_;
}
inline void PlayerLittle::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.sn)
}

// string name = 2;
inline void PlayerLittle::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLittle::name() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.name)
  return name_.GetNoArena();
}
inline void PlayerLittle::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerLittle.name)
}
inline std::string* PlayerLittle::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLittle.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLittle::release_name() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLittle.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLittle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLittle.name)
}

// .Proto.Gender gender = 3;
inline void PlayerLittle::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender PlayerLittle::gender() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void PlayerLittle::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.gender)
}

// int32 level = 4;
inline void PlayerLittle::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLittle::level() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.level)
  return level_;
}
inline void PlayerLittle::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.level)
}

// -------------------------------------------------------------------

// PlayerList

// string account = 1;
inline void PlayerList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerList::account() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.account)
  return account_.GetNoArena();
}
inline void PlayerList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerList.account)
}
inline void PlayerList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerList.account)
}
inline void PlayerList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerList.account)
}
inline void PlayerList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerList.account)
}
inline std::string* PlayerList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerList::release_account() {
  // @@protoc_insertion_point(field_release:Proto.PlayerList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerList.account)
}

// repeated .Proto.PlayerLittle player = 2;
inline int PlayerList::player_size() const {
  return player_.size();
}
inline void PlayerList::clear_player() {
  player_.Clear();
}
inline ::Proto::PlayerLittle* PlayerList::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >*
PlayerList::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerList.player)
  return &player_;
}
inline const ::Proto::PlayerLittle& PlayerList::player(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.player)
  return player_.Get(index);
}
inline ::Proto::PlayerLittle* PlayerList::add_player() {
  // @@protoc_insertion_point(field_add:Proto.PlayerList.player)
  return player_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >&
PlayerList::player() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerList.player)
  return player_;
}

// -------------------------------------------------------------------

// QueryPlayerList

// string account = 1;
inline void QueryPlayerList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayerList::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerList.account)
  return account_.GetNoArena();
}
inline void QueryPlayerList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayerList.account)
}
inline std::string* QueryPlayerList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayerList::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayerList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerList.account)
}

// -------------------------------------------------------------------

// QueryPlayer

// uint64 player_sn = 1;
inline void QueryPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayer.player_sn)
  return player_sn_;
}
inline void QueryPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryPlayer.player_sn)
}

// -------------------------------------------------------------------

// QueryPlayerRs

// string account = 1;
inline void QueryPlayerRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayerRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerRs.account)
  return account_.GetNoArena();
}
inline void QueryPlayerRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayerRs.account)
}
inline std::string* QueryPlayerRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayerRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayerRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerRs.account)
}

// .Proto.Player player = 2;
inline bool QueryPlayerRs::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& QueryPlayerRs::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerRs.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* QueryPlayerRs::release_player() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerRs.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* QueryPlayerRs::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerRs.player)
  return player_;
}
inline void QueryPlayerRs::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerRs.player)
}

// -------------------------------------------------------------------

// CreatePlayer

// string name = 1;
inline void CreatePlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePlayer::name() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayer.name)
  return name_.GetNoArena();
}
inline void CreatePlayer::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreatePlayer.name)
}
inline void CreatePlayer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreatePlayer.name)
}
inline void CreatePlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreatePlayer.name)
}
inline void CreatePlayer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreatePlayer.name)
}
inline std::string* CreatePlayer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayer.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePlayer::release_name() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayer.name)
}

// .Proto.Gender gender = 2;
inline void CreatePlayer::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender CreatePlayer::gender() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayer.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void CreatePlayer::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreatePlayer.gender)
}

// -------------------------------------------------------------------

// CreatePlayerRs

// .Proto.CreatePlayerReturnCode return_code = 2;
inline void CreatePlayerRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::CreatePlayerReturnCode CreatePlayerRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerRs.return_code)
  return static_cast< ::Proto::CreatePlayerReturnCode >(return_code_);
}
inline void CreatePlayerRs::set_return_code(::Proto::CreatePlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerRs.return_code)
}

// -------------------------------------------------------------------

// CreatePlayerToDB

// string account = 2;
inline void CreatePlayerToDB::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePlayerToDB::account() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDB.account)
  return account_.GetNoArena();
}
inline void CreatePlayerToDB::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerToDB.account)
}
inline void CreatePlayerToDB::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreatePlayerToDB.account)
}
inline void CreatePlayerToDB::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreatePlayerToDB.account)
}
inline void CreatePlayerToDB::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreatePlayerToDB.account)
}
inline std::string* CreatePlayerToDB::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayerToDB.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePlayerToDB::release_account() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayerToDB.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlayerToDB::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayerToDB.account)
}

// .Proto.Player player = 3;
inline bool CreatePlayerToDB::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& CreatePlayerToDB::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDB.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* CreatePlayerToDB::release_player() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayerToDB.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* CreatePlayerToDB::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayerToDB.player)
  return player_;
}
inline void CreatePlayerToDB::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayerToDB.player)
}

// -------------------------------------------------------------------

// CreatePlayerToDBRs

// string account = 1;
inline void CreatePlayerToDBRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePlayerToDBRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDBRs.account)
  return account_.GetNoArena();
}
inline void CreatePlayerToDBRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerToDBRs.account)
}
inline void CreatePlayerToDBRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreatePlayerToDBRs.account)
}
inline void CreatePlayerToDBRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreatePlayerToDBRs.account)
}
inline void CreatePlayerToDBRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreatePlayerToDBRs.account)
}
inline std::string* CreatePlayerToDBRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayerToDBRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePlayerToDBRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayerToDBRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlayerToDBRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayerToDBRs.account)
}

// .Proto.CreatePlayerReturnCode return_code = 2;
inline void CreatePlayerToDBRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::CreatePlayerReturnCode CreatePlayerToDBRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDBRs.return_code)
  return static_cast< ::Proto::CreatePlayerReturnCode >(return_code_);
}
inline void CreatePlayerToDBRs::set_return_code(::Proto::CreatePlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerToDBRs.return_code)
}

// -------------------------------------------------------------------

// SelectPlayer

// uint64 player_sn = 1;
inline void SelectPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SelectPlayer.player_sn)
  return player_sn_;
}
inline void SelectPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SelectPlayer.player_sn)
}

// -------------------------------------------------------------------

// SelectPlayerRs

// .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
inline void SelectPlayerRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.SelectPlayerRs.return_code)
  return static_cast< ::Proto::SelectPlayerRs_SelectPlayerReturnCode >(return_code_);
}
inline void SelectPlayerRs::set_return_code(::Proto::SelectPlayerRs_SelectPlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.SelectPlayerRs.return_code)
}

// -------------------------------------------------------------------

// SavePlayer

// uint64 player_sn = 1;
inline void SavePlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SavePlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SavePlayer.player_sn)
  return player_sn_;
}
inline void SavePlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SavePlayer.player_sn)
}

// .Proto.Player player = 2;
inline bool SavePlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& SavePlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.SavePlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* SavePlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.SavePlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* SavePlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SavePlayer.player)
  return player_;
}
inline void SavePlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.SavePlayer.player)
}

// -------------------------------------------------------------------

// WorldProxySyncToGather

// uint64 world_sn = 1;
inline void WorldProxySyncToGather::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldProxySyncToGather::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_sn)
  return world_sn_;
}
inline void WorldProxySyncToGather::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_sn)
}

// uint64 world_proxy_sn = 2;
inline void WorldProxySyncToGather::clear_world_proxy_sn() {
  world_proxy_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldProxySyncToGather::world_proxy_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_proxy_sn)
  return world_proxy_sn_;
}
inline void WorldProxySyncToGather::set_world_proxy_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_proxy_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_proxy_sn)
}

// int32 world_id = 3;
inline void WorldProxySyncToGather::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldProxySyncToGather::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_id)
  return world_id_;
}
inline void WorldProxySyncToGather::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_id)
}

// int32 online = 4;
inline void WorldProxySyncToGather::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldProxySyncToGather::online() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.online)
  return online_;
}
inline void WorldProxySyncToGather::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.online)
}

// -------------------------------------------------------------------

// GameToken

// .Proto.GameToken.ReturnCode return_code = 1;
inline void GameToken::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::GameToken_ReturnCode GameToken::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.return_code)
  return static_cast< ::Proto::GameToken_ReturnCode >(return_code_);
}
inline void GameToken::set_return_code(::Proto::GameToken_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.return_code)
}

// string token = 2;
inline void GameToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::token() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.token)
  return token_.GetNoArena();
}
inline void GameToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.token)
}
inline void GameToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.token)
}
inline void GameToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.token)
}
inline void GameToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.token)
}
inline std::string* GameToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_token() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.token)
}

// string ip = 3;
inline void GameToken::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::ip() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.ip)
  return ip_.GetNoArena();
}
inline void GameToken::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.ip)
}
inline void GameToken::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.ip)
}
inline void GameToken::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.ip)
}
inline void GameToken::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.ip)
}
inline std::string* GameToken::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_ip() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.ip)
}

// int32 port = 4;
inline void GameToken::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToken::port() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.port)
  return port_;
}
inline void GameToken::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.port)
}

// -------------------------------------------------------------------

// LoginByToken

// string account = 1;
inline void LoginByToken::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::account() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.account)
  return account_.GetNoArena();
}
inline void LoginByToken::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.account)
}
inline std::string* LoginByToken::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_account() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.account)
}

// string token = 2;
inline void LoginByToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::token() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.token)
  return token_.GetNoArena();
}
inline void LoginByToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.token)
}
inline std::string* LoginByToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_token() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.token)
}

// -------------------------------------------------------------------

// LoginByTokenRs

// .Proto.LoginByTokenRs.ReturnCode return_code = 1;
inline void LoginByTokenRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::LoginByTokenRs_ReturnCode LoginByTokenRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByTokenRs.return_code)
  return static_cast< ::Proto::LoginByTokenRs_ReturnCode >(return_code_);
}
inline void LoginByTokenRs::set_return_code(::Proto::LoginByTokenRs_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoginByTokenRs.return_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::CmdThread_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CmdThread_CmdType>() {
  return ::Proto::CmdThread_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Proto::CmdApp_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CmdApp_CmdType>() {
  return ::Proto::CmdApp_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Proto::CreateComponentParam_ParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreateComponentParam_ParamType>() {
  return ::Proto::CreateComponentParam_ParamType_descriptor();
}
template <> struct is_proto_enum< ::Proto::SelectPlayerRs_SelectPlayerReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::SelectPlayerRs_SelectPlayerReturnCode>() {
  return ::Proto::SelectPlayerRs_SelectPlayerReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::GameToken_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::GameToken_ReturnCode>() {
  return ::Proto::GameToken_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginByTokenRs_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginByTokenRs_ReturnCode>() {
  return ::Proto::LoginByTokenRs_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::NetworkObjectKeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::NetworkObjectKeyType>() {
  return ::Proto::NetworkObjectKeyType_descriptor();
}
template <> struct is_proto_enum< ::Proto::AccountCheckReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::AccountCheckReturnCode>() {
  return ::Proto::AccountCheckReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginHttpReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginHttpReturnCode>() {
  return ::Proto::LoginHttpReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::CreatePlayerReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreatePlayerReturnCode>() {
  return ::Proto::CreatePlayerReturnCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
