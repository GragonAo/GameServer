syntax = "proto3";

package Proto;

// 定义消息的ID枚举
enum MsgId {

	// proto3的枚举，必须有一个值为0
	None = 0; 

	MI_NetworkConnect			= 1;	// 网络连接
	MI_NetworkConnected			= 2;	// 连接成功

	MI_NetworkListen			= 3;	// 网络开始监听
	MI_NetworkListenKey			= 4;	// 网络监听并接收一个Key值

	/*
	* 网络断开的network通知，应用程序主动关闭连接
	* 关闭可能是由于网络问题、协议错误或其他原因
	*/
	MI_NetworkDisconnect		= 10;   // 网络断开
	MI_NetworkDisconnectEx		= 11;   // 扩展的网络断开

	/*
	* 逻辑层的断开，应用程序逻辑层主动要求断开连接
	* 比如协议中没有错误，但逻辑需要断开
	*/
	MI_NetworkRequestDisconnect	= 20;	// 逻辑层请求断开连接

	MI_RemoveComponent			= 50;	// 移除组件
	MI_CreateComponent			= 51;	// 创建组件

	MI_Ping						= 101;  // 心跳检测
	MI_AppRegister				= 102;	// 应用注册到管理器
	MI_AppInfoSync				= 103;  // 应用信息同步
	MI_AppInfoListSync			= 104;  // 应用信息列表同步

	// 登录相关消息
	C2L_AccountCheck					= 1001;  // 1.验证账户，客户端到登录服务器
	C2L_AccountCheckRs					= 1002;  // AccountCheckRs 返回给客户端

	MI_AccountQueryOnlineToRedis		= 1003;  // 2.验证账户之前，在Redis中查询账户是否已在线
	MI_AccountQueryOnlineToRedisRs		= 1004;  // 查询结果返回

	L2C_GameToken           			= 1009;  // 4.将token和Game信息发送给客户端

	L2DB_QueryPlayerList				= 1010;  // 从数据库查询玩家列表
	L2DB_QueryPlayerListRs				= 1011;  // 玩家列表查询结果返回

	C2G_LoginByToken					= 1016;	 // 1.通过Token登录游戏
	C2G_LoginByTokenRs				    = 1017;	 // LoginByToken结果返回

	G2DB_QueryPlayer					= 1101;  // 1.查询玩家信息
	G2DB_QueryPlayerRs					= 1102;  // 玩家信息查询结果返回

	L2C_PlayerList                      = 1103;  // 2.返回玩家列表给客户端

	C2L_CreatePlayer					= 1105;  // 3.创建新角色
	C2L_CreatePlayerRs					= 1106;  // CreatePlayerRs 返回给客户端

	L2DB_CreatePlayer				    = 1107;  // 4.数据库中创建新角色
	L2DB_CreatePlayerRs                 = 1108;  // 创建结果返回

	C2L_SelectPlayer					= 1109;  // 5.选择角色
	C2L_SelectPlayerRs					= 1110;  // 选择角色结果返回

	G2DB_SavePlayer						= 1800;  // 保存玩家信息到数据库

	MI_WorldProxySyncToGather			= 3002;	 // world代理同步到集群

	// 机器人状态同步
	MI_RobotSyncState					= 5001;	// 机器人状态同步到机器人管理器

	// http监听服务
	MI_HttpBegin        				= 10000; // HTTP请求开始
	MI_HttpInnerResponse 				= 10001; // 内部响应请求
	MI_HttpRequestBad    				= 10002; // 错误的HTTP请求
	MI_HttpRequestLogin	 				= 10003; // 登录请求

	MI_HttpEnd          				= 10499; // HTTP请求结束

	// http连接器，用于外部服务请求和响应
	MI_HttpOuterRequest      			= 10500; // 外部HTTP请求
	MI_HttpOuterResponse     			= 10501; // 外部HTTP响应

	// 命令相关消息
	MI_CmdThread        				= 20001; // 线程命令
	MI_CmdApp           				= 20002; // 应用命令
	MI_CmdWorldProxy    				= 20003; // 世界代理命令
}
