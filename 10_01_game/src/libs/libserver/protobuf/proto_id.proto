syntax = "proto3";

package Proto;

// 消息 ID 枚举定义
enum MsgId {

	// proto3中枚举，第一个值必须是0
	None = 0; 

	MI_NetworkConnect			= 1;	// 网络连接请求
	MI_NetworkConnected			= 2;	// 网络连接成功的响应

	MI_NetworkListen			= 3;	// 服务器监听请求，开始监听一个端口
	MI_NetworkListenKey			= 4;	// 服务器监听成功后返回的Key值

	/*
	* 当网络断开时，Network层会通知上层业务逻辑
	* 断开原因可能是客户端主动断开连接，或由于协议错误导致
	*/
	MI_NetworkDisconnect		= 10;	// 网络断开事件
	MI_NetworkDisconnectEx		= 11;	// 扩展的网络断开事件

	/*
	* 上层业务逻辑要求断开网络连接
	* 该消息从业务逻辑发送到 Network 层，请求断开连接
	*/
	MI_NetworkRequestDisconnect	= 20;	// 业务层请求断开连接

	MI_RemoveComponent			= 50;	// 移除组件
	MI_CreateComponent			= 51;	// 创建组件

	MI_Ping						= 101;  // 网络心跳检测消息
	MI_AppRegister				= 102;	// App向管理器注册消息
	MI_AppInfoSync				= 103;  // App之间的信息同步
	MI_AppInfoListSync			= 104;  // App之间的列表信息同步

	// login 登录相关消息
	C2L_AccountCheck					= 1000;  // 1. 验证账号，客户端到Login服务器
	C2L_AccountCheckRs					= 1001;  // 验证账号的响应，返回给客户端

	MI_AccountQueryOnlineToRedis		= 1002;  // 2. 验证账号时，向Redis查询该账号是否已经在线
	MI_AccountQueryOnlineToRedisRs		= 1003;  // Redis返回的账号在线状态查询响应

	L2DB_QueryPlayerList	    	= 1010;  // 1. 查询角色列表，Login到数据库服务器
	L2DB_QueryPlayerListRs		    = 1011;  // 数据库返回的角色列表

	L2C_PlayerList                  = 1012;  // 角色列表返回给客户端

	C2L_CreatePlayer				= 1014;  // 2. 创建新角色，客户端到Login服务器
	C2L_CreatePlayerRs				= 1015;  // 创建角色的响应，返回给客户端

	L2DB_CreatePlayer			    = 1016;  // 3. 创建角色的请求，Login到数据库服务器
	L2DB_CreatePlayerRs             = 1017;  // 数据库返回的创建角色结果

	C2L_SelectPlayer				= 1018;  // 4. 选择角色登录游戏，客户端到Login服务器
	C2L_SelectPlayerRs				= 1019;  // 选择角色登录游戏的响应

	MI_LoginTokenToRedis		    = 1022;	 // 1. 将登录Token存储到Redis
	MI_LoginTokenToRedisRs		    = 1023;	 // Redis返回的存储Token响应

	L2C_GameToken               	= 1024;  // 2. 将游戏Token发送到客户端，供游戏服务器验证

	// game 游戏相关消息
	C2G_LoginByToken				= 1100;	 // 1. 通过Token登录游戏，客户端到Game服务器
	C2G_LoginByTokenRs			    = 1101;	 // 登录结果返回给客户端

	MI_GameTokenToRedis		        = 1102;	 // 2. 将游戏Token存储到Redis
	MI_GameTokenToRedisRs	        = 1103;	 // Redis返回的存储游戏Token响应

	G2DB_SavePlayer					= 1800;  // 保存玩家数据到数据库

	MI_WorldProxySyncToGather	    = 3002;	 // World Proxy服务器同步数据到Gather服务器

	// redis Redis 相关消息
	MI_AccountSyncOnlineToRedis		= 4001;  // 同步 account 的在线状态到 Redis
	MI_AccountDeleteOnlineToRedis	= 4002;  // 从 Redis 中删除 account 的在线状态

	MI_PlayerSyncOnlineToRedis		= 4003;  // 同步玩家的在线状态到 Redis
	MI_PlayerDeleteOnlineToRedis	= 4004;  // 从 Redis 中删除玩家的在线状态

	// robot 机器人相关消息
	MI_RobotSyncState	= 5001;	// Robot状态同步到 Robot 管理器
    MI_RobotCreate      = 5002; // 请求创建新的 Robot

	// http listen HTTP 请求处理消息
	MI_HttpBegin         = 10000; // HTTP 请求开始
	MI_HttpInnerResponse = 10001; // 内部 HTTP 响应
	MI_HttpRequestBad    = 10002; // 错误的 HTTP 请求
	MI_HttpRequestLogin	 = 10003; // HTTP 请求登录

	MI_HttpEnd           = 10499; // HTTP 请求结束

	// http connector HTTP 连接器相关消息
	MI_HttpOuterRequest      = 10500; // 外部 HTTP 请求处理
	MI_HttpOuterResponse     = 10501; // 外部 HTTP 响应处理

	// cmd 控制台命令处理消息
	MI_CmdThread        = 20001; // 线程命令处理
	MI_CmdApp           = 20002; // App 相关命令处理
	MI_CmdWorldProxy    = 20003; // World Proxy 相关命令处理
}
